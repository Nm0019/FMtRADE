🧠 هدف پروژه

طراحی و پیاده‌سازی یک سیستم تحلیل و سیگنال‌دهی خودکار و کاملاً مستقل، برای بیش از ۳۰۰ نماد معاملاتی با دریافت داده از MetaTrader 5 (MT5) و پردازش موازی برای تولید سیگنال‌های لحظه‌ای با ساختار حرفه‌ای، سرعت بالا و قابلیت پیکربندی پیشرفته.

📁 ساختار پروژه (دایرکتوری‌ها و وظایف)

my_trader_project/
│
├── main.py                    # نقطه ورود سیستم تحلیل‌گر
├── config.py                  # تنظیمات عمومی و مقادیر ثابت
│
├── data/                      # داده‌ها و پایگاه‌های داده
│   ├── <SYMBOL>.db           # دیتابیس مستقل برای هر نماد
│
├── mt5_connector/            # ارتباط با متاتریدر و دریافت داده‌ها
│   ├── connection.py
│   ├── historical_fetcher.py
│   ├── live_socket_receiver.py
│   └── streaming_controller.py
│
├── database/                 # مدیریت دیتابیس‌ها
│   ├── db_setup.py           # ایجاد دیتابیس و جدول‌ها برای هر نماد/تایم‌فریم
│   ├── db_operations.py      # درج، بازیابی و نگهداری داده‌ها
│
├── scheduler/                # زمان‌بندی اجرای تحلیل
│   └── task_scheduler.py
│
├── indicators/               # ماژول اندیکاتورها (در حال طراحی)
│   ├── base_indicator.py     # کلاس پایه برای تمام اندیکاتورها ✅ مرحله بعدی
│   └── ...
│
├── models/                   # مدل‌های یادگیری ماشین (در حال طراحی)
│   ├── base_model.py
│   └── ...
│
├── strategies/               # ترکیب خروجی اندیکاتورها و مدل‌ها برای سیگنال نهایی
│
├── telegram_bot/             # ارسال نوتیفیکیشن در آینده (اختیاری)
│
└── utils/                    # توابع کمکی
    ├── logger.py
    └── time_utils.py

✅ ساختار فنی تاییدشده

1. هر نماد یک دیتابیس مستقل (SQLite) دارد.

مسیر: data/<symbol>.db

ساختار هر دیتابیس: جدولی برای هر تایم‌فریم (مثل ohlcv_M1, ohlcv_M5, ...)

حفظ یکتایی داده‌ها با کلید ترکیبی symbol + timeframe + time

2. دریافت داده‌ها از MT5

Historical → با historical_fetcher.py

Live Update → با data_updater.py

اجرای زمان‌بندی → با scheduler/task_scheduler.py

3. تحلیل تکنیکال + یادگیری ماشین

اندیکاتورها مانند EMA, RSI, MACD در کلاس‌های مستقل داخل indicators/

مدل‌ها مثل LinearRegression و SVM با کلاس‌های مستقل داخل models/

همه‌ی آن‌ها پیکربندی‌پذیر برای هر نماد و تایم‌فریم هستند

4. اجرای موازی تحلیل‌ها

با استفاده از multiprocessing یا concurrent.futures

هر نماد و تایم‌فریم به‌صورت موازی پردازش می‌شود

5. ارسال سیگنال

ارسال مستقیم دستورات BUY, SELL, EXIT از طریق سوکت TCP به سرور مرکزی
/////////////
///////////
/////////
///////
/////
///
//
/
فایل: indicators/base_indicator.py
این فایل شامل یک کلاس انتزاعی (abstract base class) است که پایه‌ای برای پیاده‌سازی همه‌ی اندیکاتورها خواهد بود. هر اندیکاتور باید از این کلاس ارث‌بری کند و متد calculate() را پیاده‌سازی کند.

/////////
///////
/////
                          ┌────────────────────────────┐
                          │        Start main.py       │
                          └────────────┬───────────────┘
                                       │
                 ┌────────────────────▼────────────────────┐
                 │   اتصال به متاتریدر (connect_mt5)       │
                 └────────────────────┬────────────────────┘
                                      │
               ┌─────────────────────▼─────────────────────┐
               │ دریافت لیست نمادهای کریپتویی (MT5)       │
               └─────────────────────┬─────────────────────┘
                                     │
         ┌──────────────────────────▼─────────────────────────┐
         │ ثبت مشخصات هر نماد در symbols_meta.db (register)  │
         └──────────────────────────┬─────────────────────────┘
                                     │
         ┌──────────────────────────▼──────────────────────────┐
         │ ساخت دیتابیس اختصاصی هر نماد و جداول OHLCV         │
         └──────────────────────────┬──────────────────────────┘
                                     │
         ┌──────────────────────────▼──────────────────────────┐
         │ دانلود داده‌های تاریخی برای هر نماد در تایم‌فریم‌ها │
         │     (و ذخیره در دیتابیس نماد)                        │
         └──────────────────────────┬──────────────────────────┘
                                     │
          ┌─────────────────────────▼─────────────────────────┐
          │ اجرای پردازش موازی اندیکاتورها برای تمام نمادها │
          │    با indicator_runner و multiprocessing           │
          └─────────────────────────┬─────────────────────────┘
                                     │
  ┌─────────────────────────────────▼────────────────────────────────┐
  │ برای هر نماد و تایم‌فریم:                                        │
  │   - دریافت آخرین داده‌ها (fetch_recent_data)                   │
  │   - محاسبه اندیکاتورها (EMA, RSI, MACD)                         │
  │   - اضافه‌کردن ستون‌ها در صورت نیاز (add_column_if_not_exists) │
  │   - ذخیره نتایج تحلیل در ستون‌های جدید دیتابیس                 │
  └─────────────────────────────────┬────────────────────────────────┘
                                     │
                       ┌────────────▼────────────┐
                       │   پایان تحلیل کامل     │
                       └─────────────────────────┘
